1. the maximum number of nodes at level 'l' of a binary tree is 2^(l-1)
2. the maximum number of nodes in a binary tree of height 'h' is 2^h - 1
3. minimum possible height or minimum number of levels is log2(n+1)
4. binary tree with 'l' leaves has at least log2(l) + 1 levels
5. l = I + 1 (for full binary tree) l -> leaf nodes, I -> internal nodes
6. Full binary tree: if every node has 0 or 2 children
7. Complete binary tree: if all levels are completely filled except possibly the last level and the last level has all keys as left as possible.
8. Perfect binary tree: if all internal nodes have two children and all leaves are at same level
9. Balanced binary tree: if height of the tree is O(logn). eg. AVL tree, Red black tree. These are performance wise good as time for search, insert and delete is O(logn).
10. Breadth First Traversal (Or Level Order Traversal)
Depth First Traversals:
Inorder Traversal (Left-Root-Right)
Preorder Traversal (Root-Left-Right)
Postorder Traversal (Left-Right-Root)

11. Extra Space can be one factor (Explained above)
12. Depth First Traversals are typically recursive and recursive code requires function call overheads.
13.The most important points is, BFS starts visiting nodes from root while DFS starts visiting nodes from leaves. So if our problem is to search something that is more likely to closer to root, we would prefer BFS. And if the target node is close to a leaf, we would prefer DFS.

14. The idea of threaded binary trees is to make inorder traversal faster and do it without stack and without recursion. A binary tree is made threaded by making all right child pointers that would normally be NULL point to the inorder successor of the node (if it exists).